user  nginx;
worker_processes  auto;
pid        /var/run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;
    # default_type  application/octet-stream;
    # sendfile on;
    # tcp_nopush on;
    # gzip on;
    # keepalive_timeout  65;

    log_format my_log "scheme:$scheme | host:$host| server_port:$server_port | "
    "uri:$uri"
    "remote_addr:$remote_addr | remote_user:$remote_user | request:$request | http_referer:$http_referer | http_user_agent:$http_user_agent | http_x_forwarded_for:$http_x_forwarded_for | "
    "http_upgrade:$http_upgrade | proxy_add_x_forwarded_for:$proxy_add_x_forwarded_for"
    ;

    server {
        listen 80;
        listen [::]:80;
        server_name web_server;

        access_log /var/log/nginx/web_server/access.log my_log;

        location / {
            # root는 해당되는 location의 url이 더해져, nginx에서 찾을 static file의 경로를 만듭니다.
            # 예로들어 요청 url이 /webserver/me.json이면, /static_files/webserver/me.json의 경로를 만듭니다.
            # nginx document - https://nginx.org/en/docs/http/ngx_http_core_module.html#root
            root /static_files;

            # index는 해당 location의 뒤 경로에 static file이 없을때, 응답하는 static file을 정의합니다.
            # 예로들어 요청 url이 /이면 /static_files/index.html을 응답합니다.
            # nginx document - https://nginx.org/en/docs/http/ngx_http_index_module.html#index
            index index.html;

            # try_files는 정의한 static file을 왼쪽부터 찾아 해당되면, 응답합니다.
            # https://nginx.org/en/docs/http/ngx_http_core_module.html#try_files
            try_files $uri /index.html;
        }

        location /api {
            proxy_pass http://backend_server;
        }

        location /rewrite {
            # rewrite는 flag(last, break, redirect, permanent에 따라, 요청을 재처리합니다.)
            # nginx document - https://nginx.org/en/docs/http/ngx_http_rewrite_module.html#rewrite
            rewrite ^/rewrite/last /nginx last;
            rewrite ^/rewrite/redirect $scheme://$host:81/nginx redirect;

            return 200 "rewrite";
        }

        location /nginx {
            return 200 "nginx";
        }
    }

    # nginx document - http://nginx.org/en/docs/http/load_balancing.html
    # nginx document - https://nginx.org/en/docs/http/ngx_http_upstream_module.html#upstream
    upstream backend_server {
        # ip_hash; # https://nginx.org/en/docs/http/ngx_http_upstream_module.html#ip_hash
        # least_conn; # https://nginx.org/en/docs/http/ngx_http_upstream_module.html#least_conn
        server 192.168.0.2:8001 weight=5 max_fails=1;
        server 192.168.0.2:8002 weight=5 max_fails=1;
    }
}
